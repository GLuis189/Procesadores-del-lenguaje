Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> asignacion ;
Rule 2     programa -> asignacion ; programa
Rule 3     asignacion -> ID = NUMBER

Terminals, with rules where they appear

;                    : 1 2
=                    : 3
ID                   : 3
NUMBER               : 3
error                : 

Nonterminals, with rules where they appear

asignacion           : 1 2
programa             : 2 0

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . asignacion ;
    (2) programa -> . asignacion ; programa
    (3) asignacion -> . ID = NUMBER

    ID              shift and go to state 3

    programa                       shift and go to state 1
    asignacion                     shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> asignacion . ;
    (2) programa -> asignacion . ; programa

    ;               shift and go to state 4


state 3

    (3) asignacion -> ID . = NUMBER

    =               shift and go to state 5


state 4

    (1) programa -> asignacion ; .
    (2) programa -> asignacion ; . programa
    (1) programa -> . asignacion ;
    (2) programa -> . asignacion ; programa
    (3) asignacion -> . ID = NUMBER

    $end            reduce using rule 1 (programa -> asignacion ; .)
    ID              shift and go to state 3

    asignacion                     shift and go to state 2
    programa                       shift and go to state 6

state 5

    (3) asignacion -> ID = . NUMBER

    NUMBER          shift and go to state 7


state 6

    (2) programa -> asignacion ; programa .

    $end            reduce using rule 2 (programa -> asignacion ; programa .)


state 7

    (3) asignacion -> ID = NUMBER .

    ;               reduce using rule 3 (asignacion -> ID = NUMBER .)

